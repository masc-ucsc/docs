
// kotlin

// https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d
enum class Opcode(val op: Int, val name: String, val size: Int) {
  BRK(0x00, "BRK", 1),
  JSR(0x20, "JSR", 3)
  // ...
}

// Pyrope

enum Opcode:(op:int, name:string, size:int) = (
 ,BRK = (0x00, "BRK", 1)
 ,JSR = (0x20, "JSR", 3)
  // ...
)

// RUST

enum OpCode {
  BRK,
  JSR,
  // ...
}

impl OpCode {
  fn get_attributes(&self) -> (u8, &str, usize) {
    match self {
      Self::BRK => (0x00, "BRK", 1),
      Self::JSR => (0x00, "JSR", 3),
      // ..
    }
  }
}

// Pyrope (RUST style)

let OpCode = enum(
  ,BRK
  ,JSR
  // ...
)

pub let get_attributes = fun(op:Opcode)->(op, name, size) {
  ret match op {
    ,== Opcode.BRK { (0x00, "BRK", 1) }
    ,== Opcode.JSR { (0x00, "JSR", 3) }
    // ...
  }
}

cassert Opcode.BRK.get_attributes().name == Opcode.BRK.[key]

